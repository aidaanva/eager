/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/fastqc/raw/" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: FASTQC_PROCESSED {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/fastqc/processed/" },
            mode: params.publish_dir_mode,
        ]
    }


    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: SAMTOOLS_FAIDX {
        publishDir = [
            path: { "${params.outdir}/reference/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: '*.fai',
            enabled: params.save_reference
        ]
    }

    withName: PICARD_CREATESEQUENCEDICTIONARY {
        publishDir = [
            path: { "${params.outdir}/reference/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: '*.dict',
            enabled: params.save_reference
        ]
    }

    withName: BOWTIE2_BUILD {
        publishDir = [
            path: { "${params.outdir}/reference/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: 'bowtie2/',
            enabled: params.save_reference
        ]
    }

    withName: BWA_INDEX {
        publishDir = [
            path: { "${params.outdir}/reference/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: 'bwa/',
            enabled: params.save_reference
        ]
    }

    withName: FASTP_SINGLE {
        ext.args   = [
            // TRIMMING OPTIONS
            params.preprocessing_trim5p != 0 ? "--trim_front1 ${params.preprocessing_trim5p}" : "",
            params.preprocessing_trim3p != 0 ? "--trim_tail1 ${params.preprocessing_trim3p}" : "",
            params.preprocessing_skipadaptertrim ? "--disable_adapter_trimming" : params.preprocessing_adapterlist ? "" : params.preprocessing_adapter1 ? "--adapter_sequence ${params.preprocessing_adapter1}" : "",  // adding adapter list happens at module input channel level
            // FILTERING OPTIONS
            "--length_required ${params.preprocessing_minlength}",
            params.preprocessing_fastp_complexityfilter ? "--low_complexity_filter --complexity_threshold ${params.preprocessing_fastp_complexityfilter_threshold}" : ""
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.library_id}" }
        publishDir = [
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.preprocessing_savepreprocessedreads
            ],
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: '*.log',
            ]
        ]
    }

    withName: FASTP_PAIRED {
        ext.args   = [
            // COLLAPSING OPTIONS - option to retain singletons
            params.preprocessing_excludeunmerged ? "" : "--include_unmerged",
            // TRIMMING OPTIONS
            params.preprocessing_trim5p != 0 ? "--trim_front1 ${params.preprocessing_trim5p} --trim_front2 ${params.preprocessing_trim5p}" : "",
            params.preprocessing_trim3p != 0 ? "--trim_tail1 ${params.preprocessing_trim3p} --trim_tail2 ${params.preprocessing_trim3p}" : "",
            params.preprocessing_skipadaptertrim ? "--disable_adapter_trimming" : params.preprocessing_adapterlist ? "" : params.preprocessing_adapter1 ? "--adapter_sequence ${params.preprocessing_adapter1}" : "",  // adding adapter list happens at module input channel level
            params.preprocessing_skipadaptertrim ? "" : params.preprocessing_adapterlist ? "" : params.preprocessing_adapter2 ? "--adapter_sequence_r2 ${params.preprocessing_adapter2}" : "",  // adding adapter list happens at module input channel level
            // FILTERING OPTIONS--disable_adapter_trimming
            "--length_required ${params.preprocessing_minlength}",
            params.preprocessing_fastp_complexityfilter ? "--low_complexity_filter --complexity_threshold ${params.preprocessing_fastp_complexityfilter_threshold}" : ""
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.library_id}" }
        publishDir = [
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.preprocessing_savepreprocessedreads
            ],
            [
                path: { "${params.outdir}/fastp" },
                mode: params.publish_dir_mode,
                pattern: '*.log',
            ]
        ]
    }

    withName: ADAPTERREMOVAL_SINGLE {
        ext.args   = [
            // trimming options - note: adding adapter list happens at module input channel level
            params.preprocessing_skipadaptertrim ? "--adapter1 ''" : params.preprocessing_adapterlist ? "" : params.preprocessing_adapter1 ? "--adapter1 ${params.preprocessing_adapter1}" : "", // adding adapter list happens at module input channel level
            params.preprocessing_skipadaptertrim ? "--adapter2 ''" : params.preprocessing_adapterlist ? "" : params.preprocessing_adapter2 ? "--adapter2 ${params.preprocessing_adapter2}" : "",
            "--minadapteroverlap ${params.preprocessing_adapterremoval_adapteroverlap}",
            params.preprocessing_adapterremoval_preserve5p ? "--preserve5p" : "",
            params.preprocessing_trim5p != 0 ? "--trim5p ${params.preprocessing_trim5p}" : "",
            params.preprocessing_trim3p != 0 ? "--trim3p ${params.preprocessing_trim3p}" : "",
            !params.preprocessing_adapterremoval_skipqualitytrimming ? "--trimqualities --minquality ${params.preprocessing_adapterremoval_trimbasequalitymin}" : "",
            !params.preprocessing_adapterremoval_skipntrimming ? "--trimns" : "",
            "--qualitymax ${params.preprocessing_adapterremoval_qualitymax}",
            // filtering options
            "--minlength ${params.preprocessing_minlength}"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.library_id}" }
        publishDir = [
            [
                path: { "${params.outdir}/adapterremoval" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.preprocessing_savepreprocessedreads
            ],
            [
                path: { "${params.outdir}/adapterremoval" },
                mode: params.publish_dir_mode,
                pattern: '*.settings'
            ]
        ]
    }

    withName: ADAPTERREMOVAL_PAIRED {
        ext.args   = [
            // COLLAPSING OPTIONS
            params.preprocessing_skippairmerging ? "" : "--collapse",
            // TRIMMING OPTIONS  - note: adding adapter list happens at module input channel level
            params.preprocessing_skipadaptertrim ? "--adapter1 ''" : params.preprocessing_adapterlist ? "" : params.preprocessing_adapter1 ? "--adapter1 ${params.preprocessing_adapter1}" : "",
            params.preprocessing_skipadaptertrim ? "--adapter2 ''" : params.preprocessing_adapterlist ? "" : params.preprocessing_adapter2 ? "--adapter2 ${params.preprocessing_adapter2}" : "",
            "--minadapteroverlap ${params.preprocessing_adapterremoval_adapteroverlap}",
            params.preprocessing_adapterremoval_preserve5p ? "--preserve5p" : "",
            params.preprocessing_trim5p != 0 ? "--trim5p ${params.preprocessing_trim5p}" : "",
            params.preprocessing_trim3p != 0 ? "--trim3p ${params.preprocessing_trim3p}" : "",
            !params.preprocessing_adapterremoval_skipqualitytrimming ? "--trimqualities --minquality ${params.preprocessing_adapterremoval_trimbasequalitymin}" : "",
            !params.preprocessing_adapterremoval_skipntrimming ? "--trimns" : "",
            "--qualitymax ${params.preprocessing_adapterremoval_qualitymax}",
            // FILTERING OPTIONS
            "--minlength ${params.preprocessing_minlength}"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.library_id}" }
        publishDir = [
            [
                path: { "${params.outdir}/adapterremoval" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.preprocessing_savepreprocessedreads
            ],
            [
                path: { "${params.outdir}/adapterremoval" },
                mode: params.publish_dir_mode,
                pattern: '*.settings'
            ]
        ]
    }

}

