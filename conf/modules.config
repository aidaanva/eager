/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: SAMTOOLS_FAIDX {
        publishDir = [
            path: { "${params.outdir}/reference/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: '*.fai',
            enabled: params.save_reference
        ]
    }

    withName: PICARD_CREATESEQUENCEDICTIONARY {
        publishDir = [
            path: { "${params.outdir}/reference/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: '*.dict',
            enabled: params.save_reference
        ]
    }

    withName: BOWTIE2_BUILD {
        publishDir = [
            path: { "${params.outdir}/reference/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: 'bowtie2/',
            enabled: params.save_reference
        ]
    }

    withName: BWA_INDEX {
        publishDir = [
            path: { "${params.outdir}/reference/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: 'bwa/',
            enabled: params.save_reference
        ]
    }

withName: FASTP_SINGLE {
        ext.args   = [
            // trimming options
            params.preprocessing_skipadaptertrim ? "--disable_adapter_trimming" : "",
            params.preprocessing_adapter1 ? "--adapter_sequence ${params.preprocessing_adapter1}" : "",
            // filtering options
            "--length_required ${params.preprocessing_minlength}",
            params.preprocessing_fastp_complexityfilter ? "--low_complexity_filter --complexity_threshold ${params.preprocessing_fastp_complexityfilter_threshold}" : ''
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            path: { "${params.outdir}/fastp" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz',
            enabled: params.preprocessing_savepreprocessedreads
        ]
    }

    withName: FASTP_PAIRED {
        ext.args   = [
            // collapsing options - option to retain singletons
            params.preprocessing_excludeunmerged ? '' : "--include_unmerged",
            // trimming options
            params.preprocessing_skipadaptertrim ? "--disable_adapter_trimming" : "",
            params.preprocessing_adapter1 ? "--adapter_sequence ${params.preprocessing_adapter1}" : "",
            params.preprocessing_adapter2 ? "--adapter_sequence_r2 ${params.preprocessing_adapter2}" : "--detect_adapter_for_pe",
            // filtering options
            "--length_required ${params.preprocessing_minlength}",
            params.preprocessing_fastp_complexityfilter ? "--low_complexity_filter --complexity_threshold ${params.preprocessing_fastp_complexityfilter_threshold}" : ''
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            path: { "${params.outdir}/fastp" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz',
            enabled: params.preprocessing_savepreprocessedreads
        ]
    }

    withName: ADAPTERREMOVAL_SINGLE {
        ext.args   = [
            // trimming options
            params.preprocessing_skipadaptertrim ? "--adapter1 '' --adapter2 ''" : "",
            params.preprocessing_adapter1 ? "--adapter1 ${params.preprocessing_adapter1}" : "",
            // filtering options
            "--minlength ${params.preprocessing_minlength}"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            path: { "${params.outdir}/adapterremoval" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz',
            enabled: params.preprocessing_savepreprocessedreads
        ]
    }

    withName: ADAPTERREMOVAL_PAIRED {
        ext.args   = [
            // collapsing options
            params.preprocessing_skippairmerging ? "--collapse" : "",
            // trimming options
            params.preprocessing_skipadaptertrim ? "--adapter1 '' --adapter2 ''" : "",
            params.preprocessing_adapter1 ? "--adapter1 ${params.preprocessing_adapter1}" : "",
            params.preprocessing_adapter2 ? "--adapter2 ${params.preprocessing_adapter2}" : "",
            // filtering options
            "--minlength ${params.preprocessing_minlength}"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.run_accession}" }
        publishDir = [
            path: { "${params.outdir}/adapterremoval" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz',
            enabled: params.preprocessing_savepreprocessedreads
        ]
    }

}
